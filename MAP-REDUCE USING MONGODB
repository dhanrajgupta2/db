Problem Statement 9 (Map Reduce)
Create collection for Student{roll_no, name, class, dept, aggregate_marks}. Write Map Reduce Functions for following requirements.
1. Finding the total marks of students of “TE” class department-wise.
2. Finding the highest marks of students of “SE” class department-wise.
3. Find Average marks of students of “BE” class department-wise.

solution : 

use school;

db.Student.insertMany([
  { roll_no: 1, name: "John", class: "TE", dept: "Computer Science", aggregate_marks: 85 },
  { roll_no: 2, name: "Alice", class: "TE", dept: "Mechanical", aggregate_marks: 75 },
  { roll_no: 3, name: "Bob", class: "SE", dept: "Computer Science", aggregate_marks: 95 },
  { roll_no: 4, name: "Charlie", class: "SE", dept: "Electrical", aggregate_marks: 90 },
  { roll_no: 5, name: "Dave", class: "BE", dept: "Civil", aggregate_marks: 80 },
  { roll_no: 6, name: "Eve", class: "BE", dept: "Computer Science", aggregate_marks: 88 },
  { roll_no: 7, name: "Grace", class: "TE", dept: "Electrical", aggregate_marks: 72 }
]);

1. Finding the Total Marks of Students of "TE" Class Department-wise

var map1 = function() {
  if (this.class == "TE") {
    emit(this.dept, this.aggregate_marks);  // Emit department as key and aggregate_marks as value
  }
};

var reduce1 = function(key, values) {
  return Array.sum(values);  // Sum up all marks for each department
};

db.Student.mapReduce(map1, reduce1, { out: "total_marks_TE" });

2. Finding the Highest Marks of Students of "SE" Class Department-wise

var map2 = function() {
  if (this.class == "SE") {
    emit(this.dept, this.aggregate_marks);  // Emit department as key and aggregate_marks as value
  }
};

var reduce2 = function(key, values) {
  return Math.max.apply(null, values);  // Find the maximum value (marks) for each department
};

db.Student.mapReduce(map2, reduce2, { out: "highest_marks_SE" });

3. Finding the Average Marks of Students of "BE" Class Department-wise

var map3 = function() {
  if (this.class == "BE") {
    emit(this.dept, { total_marks: this.aggregate_marks, count: 1 });  // Emit department as key and an object containing total_marks and count
  }
};

var reduce3 = function(key, values) {
  var result = { total_marks: 0, count: 0 };
  
  values.forEach(function(value) {
    result.total_marks += value.total_marks;  // Sum the marks
    result.count += value.count;              // Count the number of students
  });
  
  return result;
};

var finalize3 = function(key, reducedValue) {
  reducedValue.average_marks = reducedValue.total_marks / reducedValue.count;  // Calculate average
  return reducedValue;
};

db.Student.mapReduce(map3, reduce3, { out: "average_marks_BE", finalize: finalize3 });

( commands to view output )

db.total_marks_TE.find();
db.highest_marks_SE.find();
db.average_marks_BE.find();

( commands to drop table ) 

db.total_marks_TE.drop();
db.highest_marks_SE.drop();
db.average_marks_BE.drop();

<=============================================================================================================================================================================================================================================================================================================>

Problem Statement 15 (Map Reduce using MongoDB)
Create Book Collection with (Title, Author_name, Borrowed_status) as fields. Write Map Reduce Functions for following requirements.
1. Display Author wise list of books.
2. Display Author wise list of books having Borrowed status as “True”.
3. Display Author wise list of books having price greater than 300.

solution : 

use libraryDB

db.createCollection("Book")

// Insert some sample data
db.Book.insertMany([
    { Title: "The Catcher in the Rye", Author_name: "J.D. Salinger", Borrowed_status: true, Price: 250 },
    { Title: "To Kill a Mockingbird", Author_name: "Harper Lee", Borrowed_status: false, Price: 500 },
    { Title: "1984", Author_name: "George Orwell", Borrowed_status: true, Price: 350 },
    { Title: "The Great Gatsby", Author_name: "F. Scott Fitzgerald", Borrowed_status: true, Price: 450 },
    { Title: "Moby Dick", Author_name: "Herman Melville", Borrowed_status: false, Price: 150 },
    { Title: "Pride and Prejudice", Author_name: "Jane Austen", Borrowed_status: true, Price: 700 }
])

1. Display Author-wise list of books

// Map function to group books by Author_name
var mapFunction = function() {
    emit(this.Author_name, { books: [this.Title] });
};

// Reduce function to accumulate books for each author
var reduceFunction = function(key, values) {
    var result = { books: [] };
    values.forEach(function(value) {
        result.books = result.books.concat(value.books);
    });
    return result;
};

// Run the MapReduce operation
db.Book.mapReduce(
    mapFunction,
    reduceFunction,
    { out: "author_books" }
);

// To view the result
db.author_books.find()

2. Display Author-wise list of books having Borrowed status as “True”

// Map function to group books by Author_name and filter Borrowed_status
var mapFunctionBorrowed = function() {
    if (this.Borrowed_status === true) {
        emit(this.Author_name, { books: [this.Title] });
    }
};

// Reduce function to accumulate books for each author
var reduceFunctionBorrowed = function(key, values) {
    var result = { books: [] };
    values.forEach(function(value) {
        result.books = result.books.concat(value.books);
    });
    return result;
};

// Run the MapReduce operation
db.Book.mapReduce(
    mapFunctionBorrowed,
    reduceFunctionBorrowed,
    { out: "author_borrowed_books" }
);

// To view the result
db.author_borrowed_books.find()

3.  Display Author-wise list of books having Price greater than 300

// Map function to group books by Author_name and filter Price > 300
var mapFunctionPrice = function() {
    if (this.Price > 300) {
        emit(this.Author_name, { books: [this.Title] });
    }
};

// Reduce function to accumulate books for each author
var reduceFunctionPrice = function(key, values) {
    var result = { books: [] };
    values.forEach(function(value) {
        result.books = result.books.concat(value.books);
    });
    return result;
};

// Run the MapReduce operation
db.Book.mapReduce(
    mapFunctionPrice,
    reduceFunctionPrice,
    { out: "author_expensive_books" }
);

// To view the result
db.author_expensive_books.find()

<=============================================================================================================================================================================================================================================================================================================>
