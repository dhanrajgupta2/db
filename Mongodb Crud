Exp 2 : Design and Develop MongoDB Queries using CRUD
operations. (Use CRUD operations, SAVE method, logical operators)


to start mongodb using crud operation

commands to start it

- sudo systemctl enable mongod (after this statement write password which is student)


( after password is accepted)

- sudo systemctl start mongod
- mongosh

( mongodb is started )


- show databases

( random data will be displayed )

- use db ( to make a folder )

(after the folder has been made we will start our operation )

- db.createCollection("users")

( any random text with the message ok )

- db.createCollection("posts")

( any random text with the message ok )

- show collections 

( random text will displayed that the things users have putted inside )

- db.users.insertMany([{"Name":"Dhanraj"},{"Name":"Adesh"}])

( random text with the message of acknowledgement true )

- db.users.find()

( random text will tell the users that he found the data ) 

- db.users.update({Name:"Adesh"},{$set:{Name:"Aryan"}}) 

( it will change the name of Adesh to Aryan with the message of acknolwedgement true )

- db.users.find() 

( to check did our data updated or not ) 

- db.users.deleteOne({Name:"Aryan"}) 

( to delete the name Aryan )


( TO USE COMPARISION STATEMENT )


- db.createCollection("products")



- db.products.insertMany([
    { name: 'Laptop', price: 1200, category: 'Electronics' },
    { name: 'Mouse', price: 25, category: 'Electronics' },
    { name: 'Keyboard', price: 50, category: 'Electronics' },
    { name: 'Desk', price: 300, category: 'Furniture' },
    { name: 'Chair', price: 150, category: 'Furniture' }
])

 ( Using $eq and $ne)

// Products in the Electronics category

- db.products.find({ category: { $eq: 'Electronics' } })

// Products not in the Electronics category

- db.products.find({ category: { $ne: 'Electronics' } })

( Using $gt and $lt )

// Products costing more than $100

- db.products.find({ price: { $gt: 100 } })

// Products costing less than $100

- db.products.find({ price: { $lt: 100 } })

( Using $gte and $lte )

// Products costing $50 or more

- db.products.find({ price: { $gte: 50 } })

// Products costing $150 or less

- db.products.find({ price: { $lte: 150 } })

( Using $in )

// Products in selected categories

- db.products.find({ category: { $in: ['Electronics', 'Furniture'] } })

- db.products.find().pretty()


( USING LOGICAL OPERATOR ) 


- db.createCollection("product")

- db.product.insertMany([
    { name: 'Laptop', price: 1200, category: 'Electronics' },
    { name: 'Mouse', price: 25, category: 'Electronics' },
    { name: 'Keyboard', price: 50, category: 'Electronics' },
    { name: 'Desk', price: 300, category: 'Furniture' },
    { name: 'Chair', price: 150, category: 'Furniture' },
    { name: 'Monitor', price: 300, category: 'Electronics' },
    { name: 'Lamp', price: 40, category: 'Furniture' }
])


( Using $and Find products that are in the Electronics category and cost more than $100: )

- db.product.find({
    $and: [
        { category: { $eq: 'Electronics' } },
        { price: { $gt: 100 } }
    ]
})


( Using $or Find products that are either in Electronics or cost less than $50:)

- db.product.find({
    $or: [
        { category: { $eq: 'Electronics' } },
        { price: { $lt: 50 } }
    ]
})

( Using $nor Find products that are neither in the Electronics category nor cost more than $150:)

- db.product.find({
    $nor: [
        { category: { $eq: 'Electronics' } },
        { price: { $gt: 150 } }
    ]
})

( Using $not Find products that do not cost more than $150:

- db.product.find({
    price: { $not: { $gt: 150 } }
})


question 2 : Create Institute Database and Create Student collection
1. RollNo
2. Student Name
3. Age
4. Branch
5. Address :{ City, State}
6. Hobbies (Array)

solution 

step 1 : 

use Institute

step 2 : 

db.Student.insertMany([
    {
        "RollNo": 1,
        "StudentName": "John Doe",
        "Age": 20,
        "Branch": "Computer Science",
        "Address": { 
            "City": "New York",
            "State": "NY"
        },
        "Hobbies": ["Reading", "Swimming", "Coding"]
    },
    {
        "RollNo": 2,
        "StudentName": "Alice Smith",
        "Age": 21,
        "Branch": "Mechanical Engineering",
        "Address": { 
            "City": "Los Angeles",
            "State": "CA"
        },
        "Hobbies": ["Painting", "Cycling"]
    },
    {
        "RollNo": 3,
        "StudentName": "Bob Johnson",
        "Age": 22,
        "Branch": "Electrical Engineering",
        "Address": { 
            "City": "Chicago",
            "State": "IL"
        },
        "Hobbies": ["Chess", "Robotics"]
    },
    {
        "RollNo": 4,
        "StudentName": "Emily Davis",
        "Age": 19,
        "Branch": "Civil Engineering",
        "Address": { 
            "City": "Houston",
            "State": "TX"
        },
        "Hobbies": ["Photography", "Traveling"]
    },
    {
        "RollNo": 5,
        "StudentName": "Michael Brown",
        "Age": 23,
        "Branch": "Information Technology",
        "Address": { 
            "City": "Phoenix",
            "State": "AZ"
        },
        "Hobbies": ["Gaming", "Blogging", "Reading"]
    }
])

step 3 : 

db.Student.find().pretty()

question 3 : Perform following operations
1. Create database Institute.
2. Create collection Students.
3. Insert 10 documents with above mentioned structure.
4. Display all studentsâ€™ information.
5. Display Student information whose age is greater than 15.
6. Display Student information sorted on name field
7. Update student branch Computer of RollNo 3.
8. Remove document with RollNo 1
9. Display Student information whose name starts with A
10. Display the total numbers of documents available in collection.
11. Display only first 5 documents.
12. Display all documents instead of first 3.
13. Display the name of Students who live in Pune City.
14. Display the list of different cities from where students are coming.
15. Display the list of different cities with number of students from belonging to that city.
16. Display only Name of all students.
17. Display the hobbies of each student.
18. Drop Collection


solution : 

1. Create database Institute

use Institute

2. Create collection Students

db.createCollection("Students")

3. Insert 10 documents with the specified structure

db.Students.insertMany([
    { "RollNo": 1, "StudentName": "John Doe", "Age": 20, "Branch": "Computer Science", "Address": { "City": "New York", "State": "NY" }, "Hobbies": ["Reading", "Swimming", "Coding"] },
    { "RollNo": 2, "StudentName": "Alice Smith", "Age": 21, "Branch": "Mechanical Engineering", "Address": { "City": "Pune", "State": "MH" }, "Hobbies": ["Painting", "Cycling"] },
    { "RollNo": 3, "StudentName": "Bob Johnson", "Age": 22, "Branch": "Computer Science", "Address": { "City": "Chicago", "State": "IL" }, "Hobbies": ["Chess", "Robotics"] },
    { "RollNo": 4, "StudentName": "Emily Davis", "Age": 19, "Branch": "Civil Engineering", "Address": { "City": "Houston", "State": "TX" }, "Hobbies": ["Photography", "Traveling"] },
    { "RollNo": 5, "StudentName": "Michael Brown", "Age": 23, "Branch": "Information Technology", "Address": { "City": "Phoenix", "State": "AZ" }, "Hobbies": ["Gaming", "Blogging", "Reading"] },
    { "RollNo": 6, "StudentName": "Anna Lee", "Age": 18, "Branch": "Biotechnology", "Address": { "City": "Los Angeles", "State": "CA" }, "Hobbies": ["Gardening", "Singing"] },
    { "RollNo": 7, "StudentName": "Chris Evans", "Age": 22, "Branch": "Electrical Engineering", "Address": { "City": "Pune", "State": "MH" }, "Hobbies": ["Acting", "Coding"] },
    { "RollNo": 8, "StudentName": "Amy Turner", "Age": 20, "Branch": "Physics", "Address": { "City": "Dallas", "State": "TX" }, "Hobbies": ["Swimming", "Reading"] },
    { "RollNo": 9, "StudentName": "Paul Martin", "Age": 21, "Branch": "Mathematics", "Address": { "City": "San Francisco", "State": "CA" }, "Hobbies": ["Cooking", "Traveling"] },
    { "RollNo": 10, "StudentName": "Alex King", "Age": 19, "Branch": "Chemistry", "Address": { "City": "Pune", "State": "MH" }, "Hobbies": ["Music", "Dancing"] }
])

4. Display all students' information

db.Students.find().pretty()

5. Display student information where age is greater than 15

db.Students.find({ Age: { $gt: 15 } }).pretty()

6. Display student information sorted by the StudentName field

db.Students.find().sort({ StudentName: 1 }).pretty()

7. Update student branch to Computer for RollNo 3

db.Students.updateOne({ RollNo: 3 }, { $set: { Branch: "Computer" } })

8. Remove document with RollNo 1

db.Students.deleteOne({ RollNo: 1 })

9. Display student information where StudentName starts with "A"

db.Students.find({ StudentName: { $regex: /^A/ } }).pretty()

10. Display the total number of documents available in the collection

db.Students.countDocuments()

11. Display only the first 5 documents

db.Students.find().limit(5).pretty()

12. Display all documents except the first 3

db.Students.find().skip(3).pretty()

13. Display names of students who live in Pune city

db.Students.find({ "Address.City": "Pune" }, { StudentName: 1, _id: 0 }).pretty()

14. Display a list of unique cities from where students are coming

db.Students.distinct("Address.City")

15. Display a list of cities with the number of students from each city

db.Students.aggregate([
    { $group: { _id: "$Address.City", count: { $sum: 1 } } }
])

16. Display only the StudentName of all students

db.Students.find({}, { StudentName: 1, _id: 0 }).pretty()

17. Display the hobbies of each student

db.Students.find({}, { Hobbies: 1, _id: 0 }).pretty()

18. Drop the Students collection

db.Students.drop()
