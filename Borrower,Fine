exp 1 : Write a PL/SQL block of code for the following requirements:-
Schema:
1. Borrower(Rollin, Name, DateofIssue, NameofBook, Status)
2. Fine(Roll_no,Date,Amt)
Accept roll_no & name of book from user. Check the number of days (from date of issue), if
days are between 15 to 30 then fine amount will be Rs 5 per day. If no. of days>30, per day
fine will be Rs 50 per day & for days less than 30, Rs. 5 per day. After submitting the book,
status will change from I to R. If condition of fine is true, then details will be stored into fine
table.


-- Drop the tables if they exist (to avoid conflicts)
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Fine';
    EXECUTE IMMEDIATE 'DROP TABLE Borrower';
EXCEPTION
    WHEN OTHERS THEN
        NULL; -- Ignore errors if tables do not exist
END;
/
step 1 :

-- Create the Borrower table
CREATE TABLE Borrower (
    Rollin NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    DateofIssue DATE,
    NameOfBook VARCHAR2(100), -- Corrected column name to "NameOfBook"
    Status CHAR(1) CHECK (Status IN ('I', 'R')) -- I for Issued, R for Returned
);

-- Create the Fine table
CREATE TABLE Fine (
    Roll_no NUMBER,
    Fine_Date DATE,
    Amt NUMBER,
    FOREIGN KEY (Roll_no) REFERENCES Borrower(Rollin)
);

step 2 :
-- Insert sample data into Borrower
INSERT INTO Borrower (Rollin, Name, DateofIssue, NameOfBook, Status) -- Use "NameOfBook"
VALUES (3, 'Charlie', TO_DATE('2024-09-05', 'YYYY-MM-DD'), 'Database Fundamentals', 'I');

INSERT INTO Borrower (Rollin, Name, DateofIssue, NameOfBook, Status) -- Use "NameOfBook"
VALUES (4, 'Diana', TO_DATE('2024-09-20', 'YYYY-MM-DD'), 'Advanced SQL', 'I');

COMMIT;

step 3:

DECLARE
    v_roll_no NUMBER;
    v_name_of_book VARCHAR2(100);
    v_date_of_issue DATE;
    v_days INT;
    v_fine_amt NUMBER := 0;
    v_current_date DATE := SYSDATE; -- Current date
    v_status CHAR(1) := 'R'; -- Set status to Returned

BEGIN
    -- Accept inputs
    v_roll_no := &roll_no; -- Prompt user for roll_no
    v_name_of_book := '&name_of_book'; -- Prompt user for name of book

    -- Fetch the Date of Issue from Borrower table
    SELECT DateofIssue INTO v_date_of_issue
    FROM Borrower
    WHERE Rollin = v_roll_no AND NameofBook = v_name_of_book AND Status = 'I';

    -- Calculate number of days between current date and date of issue
    v_days := TRUNC(v_current_date - v_date_of_issue);

    -- Calculate fine based on the number of days
    IF v_days > 30 THEN
        v_fine_amt := (v_days - 30) * 50 + 30 * 5; -- Fine for more than 30 days
    ELSIF v_days >= 15 AND v_days <= 30 THEN
        v_fine_amt := v_days * 5; -- Fine for 15 to 30 days
    ELSIF v_days < 15 THEN
        v_fine_amt := 0; -- No fine for less than 15 days
    END IF;

    -- Update status in Borrower table
    UPDATE Borrower
    SET Status = v_status
    WHERE Rollin = v_roll_no AND NameofBook = v_name_of_book AND Status = 'I';

    -- Insert fine record if applicable
    IF v_fine_amt > 0 THEN
        INSERT INTO Fine (Roll_no, Fine_Date, Amt)
        VALUES (v_roll_no, v_current_date, v_fine_amt);
    END IF;

    -- Commit the transaction
    COMMIT;

    -- Output the fine amount if any
    IF v_fine_amt > 0 THEN
        DBMS_OUTPUT.PUT_LINE('Fine Amount: ' || v_fine_amt);
    ELSE
        DBMS_OUTPUT.PUT_LINE('No fine applicable.');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No record found for the provided Roll No and Book Name.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
        ROLLBACK;
END;


question 1 : Consider table Stud(Roll, Att,Status) Write a PL/SQL block for following
requirement and handle the exceptions. Roll no. of student will be entered
by user. Attendance of roll no. entered by user will be checked in Stud
table. If attendance is less than 75% then display the message “Term not
granted” and set the status in stud table as “D”. Otherwise display
message “Term granted” and set the status in stud table as “ND”

solution 1 : 

step 1 : 

CREATE TABLE Student1 (
    St_roll_no NUMBER,        -- Student roll number
    St_name VARCHAR(20),      -- Student name (max 20 characters)
    Att_percentage NUMBER,    -- Attendance percentage
    Status VARCHAR(20)        -- Detained status ('ND' for Not Detained, 'D' for Detained)
);

step 2 : 

SET SERVEROUTPUT ON;  -- Enables output to the console

DECLARE
    roll NUMBER;       -- Variable to store the student roll number
    atp NUMBER;        -- Variable to store the attendance percentage

BEGIN
    roll := &St_roll_no;  -- Input the student roll number at runtime
    -- Fetch the attendance percentage for the student from the Student1 table
    SELECT Att_percentage INTO atp 
    FROM Student1 
    WHERE St_roll_no = roll;

    -- Check if the attendance percentage is greater than 75
    IF (atp > 75) THEN
        -- If attendance is more than 75, student is not detained
        dbms_output.put_line(roll || ' is not detained');
        -- Update the status to 'ND' (Not Detained)
        UPDATE Student1 
        SET Status = 'ND' 
        WHERE St_roll_no = roll;
    ELSE
        -- If attendance is 75 or less, student is detained
        dbms_output.put_line(roll || ' is detained');
        -- Update the status to 'D' (Detained)
        UPDATE Student1 
        SET Status = 'D' 
        WHERE St_roll_no = roll;
    END IF;
END;

question 3 : Write a PL/SQL block for following requirement using user defined
exception handling.
The account_master table records the current balance for an account,
which is updated whenever, any deposits or withdrawals takes place.
(Acc_no, Cust_name, Balance)
Input: Acc_no, Operation, Amount
If the withdrawal attempted is more than the current balance held in the
account. The user defined exception is raised, displaying an appropriate
message. Write a PL/SQL block for above requirement using user defined
exception handling.

solution : 

DROP TABLE account_master;

step 1 : 

CREATE TABLE account_master (
    Acc_no NUMBER PRIMARY KEY,        -- Account number (Primary Key)
    Cust_name VARCHAR(50),            -- Customer name
    Balance NUMBER                    -- Current balance in the account
);

step 2 : 

SET SERVEROUTPUT ON;

DECLARE
    acc_no NUMBER;                   -- Variable to store the account number
    operation CHAR(1);               -- Variable to store the operation (D for Deposit, W for Withdrawal)
    amount NUMBER;                   -- Variable to store the amount for deposit or withdrawal
    current_balance NUMBER;          -- Variable to store the current balance of the account
    insufficient_funds EXCEPTION;    -- User-defined exception for insufficient funds

BEGIN
    -- Accept inputs for account number, operation, and amount
    acc_no := &Acc_no;
    operation := '&Operation';       -- D for Deposit, W for Withdrawal
    amount := &Amount;

    -- Fetch the current balance for the given account number
    SELECT Balance INTO current_balance
    FROM account_master
    WHERE Acc_no = acc_no;

    -- Perform operation based on input (D for Deposit, W for Withdrawal)
    IF operation = 'D' THEN
        -- Deposit operation: Add the amount to the current balance
        UPDATE account_master
        SET Balance = current_balance + amount
        WHERE Acc_no = acc_no;
        
        dbms_output.put_line('Deposit successful. New Balance: ' || (current_balance + amount));

    ELSIF operation = 'W' THEN
        -- Withdrawal operation: Check if there are sufficient funds
        IF amount > current_balance THEN
            -- Raise user-defined exception if withdrawal amount exceeds current balance
            RAISE insufficient_funds;
        ELSE
            -- Perform the withdrawal by subtracting the amount from the current balance
            UPDATE account_master
            SET Balance = current_balance - amount
            WHERE Acc_no = acc_no;

            dbms_output.put_line('Withdrawal successful. New Balance: ' || (current_balance - amount));
        END IF;
    ELSE
        dbms_output.put_line('Invalid operation. Please enter D for Deposit or W for Withdrawal.');
    END IF;

EXCEPTION
    -- Handle the insufficient funds exception
    WHEN insufficient_funds THEN
        dbms_output.put_line('Error: Insufficient funds for withdrawal. Current Balance: ' || current_balance);

    -- Handle any other unexpected errors
    WHEN OTHERS THEN
        dbms_output.put_line('An unexpected error occurred: ' || SQLERRM);

END;

question 4 : Write a PL/SQL code block to calculate the area of a circle for a value of
radius varying from 5 to 9. Store the radius and the corresponding values
of calculated area in an empty table named areas, consisting of two
columns, radius and area.

step 1 : 

CREATE TABLE circle (
    RADIUS NUMBER,  -- The radius of the circle
    AREA NUMBER     -- The calculated area of the circle
);

step 2 :

SET serveroutput ON;  -- Enable output to the console

DECLARE
    rad NUMBER := &r;  -- Variable to store the input radius (r), entered by the user
    a NUMBER;          -- Variable to store the calculated area
BEGIN
    -- Check if the radius is between 5 and 9
    IF (rad >= 5 AND rad <= 9) THEN
        -- Calculate the area of the circle (Area = π * radius^2)
        a := 3.14 * (rad ** 2);
        
        -- Insert the radius and calculated area into the circle table
        INSERT INTO circle (RADIUS, AREA) 
        VALUES (rad, a);
        
    ELSE
        -- If the radius is outside the 5 to 9 range, display a message
        DBMS_OUTPUT.put_line('Please enter radius between 5 and 9');
    END IF;
END;
