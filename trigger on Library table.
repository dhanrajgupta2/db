Problem Statement 1 (Triggers)
Employee(emp_id, emp_name, salary, designation) Salary_Backup(emp_id, old_salary, new_salary, salary_difference)
Create a Trigger to record salary change of the employee. Whenever salary is updated insert the details in Salary_Backup table.
Create a Trigger that will prevent deleting the employee record having designation as CEO.

solution 

step 1 : 

-- Create Employee table
CREATE TABLE Employee (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(100),
    salary NUMBER,
    designation VARCHAR2(50)
);

-- Create Salary_Backup table to store salary change history
CREATE TABLE Salary_Backup (
    emp_id NUMBER,
    old_salary NUMBER,
    new_salary NUMBER,
    salary_difference NUMBER
);

step 2 : 

-- Insert sample data into Employee table
INSERT INTO Employee (emp_id, emp_name, salary, designation) 
VALUES (1, 'John Doe', 50000, 'Manager');

INSERT INTO Employee (emp_id, emp_name, salary, designation) 
VALUES (2, 'Jane Smith', 100000, 'CEO');

INSERT INTO Employee (emp_id, emp_name, salary, designation) 
VALUES (3, 'Alice Brown', 45000, 'Engineer');

INSERT INTO Employee (emp_id, emp_name, salary, designation) 
VALUES (4, 'Bob White', 60000, 'Manager');

step 3 : Create the Trigger to Record Salary Changes

CREATE OR REPLACE TRIGGER trg_salary_update
AFTER UPDATE OF salary ON Employee
FOR EACH ROW
BEGIN
    IF :OLD.salary != :NEW.salary THEN
        INSERT INTO Salary_Backup (emp_id, old_salary, new_salary, salary_difference)
        VALUES (:OLD.emp_id, :OLD.salary, :NEW.salary, :NEW.salary - :OLD.salary);
    END IF;
END;
/

step 4 : Create the Trigger to Prevent Deleting CEO

CREATE OR REPLACE TRIGGER trg_prevent_delete_ceo
BEFORE DELETE ON Employee
FOR EACH ROW
BEGIN
    IF :OLD.designation = 'CEO' THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot delete record with designation as CEO.');
    END IF;
END;
/

step 5 : Test the Triggers

-- Update salary for employee with emp_id 1
UPDATE Employee
SET salary = 55000
WHERE emp_id = 1;

step 6 : 

SELECT * FROM Salary_Backup;

step 7 : Attempt to Delete CEO Record

-- Try to delete the CEO record
DELETE FROM Employee
WHERE emp_id = 2;

<=========================================================================================================================================================================================================================================================>

Problem Statement 10 (Triggers)
Employee( emp_id, dept_idemp_name, DoJ, salary, commission,job_title) Consider the schema given above for Write a PLSQL Program to
1. Create a Trigger to ensure the salary of the employee is not decreased.
2. Whenever the job title is changed for an employee write the following details into job_history table. Employee ID, old job title, old department ID, DoJ for start date, system date for end date.

solution :

-- Create the Employee table
CREATE TABLE Employee (
    emp_id INT PRIMARY KEY,
    dept_id INT,
    emp_name VARCHAR2(50),
    DoJ DATE,
    salary NUMBER(10, 2),
    commission NUMBER(10, 2),
    job_title VARCHAR2(50)
);

-- Create the job_history table
CREATE TABLE job_history (
    emp_id INT,
    old_job_title VARCHAR2(50),
    old_dept_id INT,
    start_date DATE,
    end_date DATE,
    FOREIGN KEY (emp_id) REFERENCES Employee(emp_id)
);

-- Insert sample data into the Employee table
INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, commission, job_title)
VALUES (101, 1, 'John Doe', TO_DATE('2022-01-15', 'YYYY-MM-DD'), 50000, 5000, 'Developer');

INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, commission, job_title)
VALUES (102, 2, 'Alice Smith', TO_DATE('2021-05-10', 'YYYY-MM-DD'), 55000, 5500, 'Manager');

INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, commission, job_title)
VALUES (103, 1, 'Bob Brown', TO_DATE('2020-03-22', 'YYYY-MM-DD'), 45000, 4000, 'Tester');

Trigger 1: Ensure Employee Salary is Not Decreased

-- Create the trigger to ensure salary is not decreased
CREATE OR REPLACE TRIGGER prevent_salary_decrease
BEFORE UPDATE ON Employee
FOR EACH ROW
BEGIN
    IF :NEW.salary < :OLD.salary THEN
        RAISE_APPLICATION_ERROR(-20001, 'Salary cannot be decreased!');
    END IF;
END;
/

Trigger 2: Log Job Title Changes in job_history Table

-- Create the trigger to log job title changes in job_history table
CREATE OR REPLACE TRIGGER log_job_title_change
BEFORE UPDATE OF job_title ON Employee
FOR EACH ROW
BEGIN
    INSERT INTO job_history (emp_id, old_job_title, old_dept_id, start_date, end_date)
    VALUES (:OLD.emp_id, :OLD.job_title, :OLD.dept_id, :OLD.DoJ, SYSDATE);
END;
/

( TESTING TRIGGERS ) 

Test Trigger 1 (Salary Decrease Prevention)

UPDATE Employee
SET salary = 40000
WHERE emp_id = 101;


Test Trigger 2 (Job Title Change Logging)

UPDATE Employee
SET job_title = 'Senior Developer'
WHERE emp_id = 101;

( to see output )

SELECT * FROM job_history;

