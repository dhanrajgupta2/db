Problem Statement 3 (Aggregation & Indexing)
Create the Collection Movies_Data( Movie_ID, Movie_Name, Director, Genre, BoxOfficeCollection) and solve the following:
1. Display a list stating how many Movies are directed by each “Director”.
2. Display list of Movies with the highest BoxOfficeCollection in each Genre.
3. Display list of Movies with the highest BoxOfficeCollection in each Genre in ascending order of BoxOfficeCollection.
4. Create an index on field Movie_ID.
5. Create an index on fields ” Movie_Name” and ” Director”.
6. Drop an index on field Movie_ID.


solution : 

db.Movies_Data.insertMany([
  { Movie_ID: 1, Movie_Name: "Inception", Director: "Christopher Nolan", Genre: "Sci-Fi", BoxOfficeCollection: 800000000 },
  { Movie_ID: 2, Movie_Name: "Interstellar", Director: "Christopher Nolan", Genre: "Sci-Fi", BoxOfficeCollection: 700000000 },
  { Movie_ID: 3, Movie_Name: "The Dark Knight", Director: "Christopher Nolan", Genre: "Action", BoxOfficeCollection: 1000000000 },
  { Movie_ID: 4, Movie_Name: "Titanic", Director: "James Cameron", Genre: "Romance", BoxOfficeCollection: 2200000000 },
  { Movie_ID: 5, Movie_Name: "Avatar", Director: "James Cameron", Genre: "Sci-Fi", BoxOfficeCollection: 2800000000 },
  { Movie_ID: 6, Movie_Name: "Pulp Fiction", Director: "Quentin Tarantino", Genre: "Crime", BoxOfficeCollection: 210000000 },
  { Movie_ID: 7, Movie_Name: "Django Unchained", Director: "Quentin Tarantino", Genre: "Western", BoxOfficeCollection: 425000000 },
  { Movie_ID: 8, Movie_Name: "The Godfather", Director: "Francis Ford Coppola", Genre: "Crime", BoxOfficeCollection: 250000000 },
  { Movie_ID: 9, Movie_Name: "The Godfather Part II", Director: "Francis Ford Coppola", Genre: "Crime", BoxOfficeCollection: 190000000 },
  { Movie_ID: 10, Movie_Name: "The Revenant", Director: "Alejandro G. Iñárritu", Genre: "Adventure", BoxOfficeCollection: 533000000 }
])

1. Display a list stating how many movies are directed by each “Director”:

db.Movies_Data.aggregate([
   { $group: { _id: "$Director", movie_count: { $sum: 1 } } },
   { $project: { _id: 0, Director: "$_id", Total_Movies: "$movie_count" } }
])

2. Display a list of movies with the highest BoxOfficeCollection in each Genre:

db.Movies_Data.aggregate([
   { $sort: { Genre: 1, BoxOfficeCollection: -1 } },
   { $group: { _id: "$Genre", highest_movie: { $first: "$$ROOT" } } },
   { $project: { _id: 0, Movie_Name: "$highest_movie.Movie_Name", Genre: "$highest_movie.Genre", BoxOfficeCollection: "$highest_movie.BoxOfficeCollection" } }
])

3. Display a list of movies with the highest BoxOfficeCollection in each Genre in ascending order of BoxOfficeCollection:

db.Movies_Data.aggregate([
   { $sort: { Genre: 1, BoxOfficeCollection: -1 } },
   { $group: { _id: "$Genre", highest_movie: { $first: "$$ROOT" } } },
   { $sort: { "highest_movie.BoxOfficeCollection": 1 } },
   { $project: { _id: 0, Movie_Name: "$highest_movie.Movie_Name", Genre: "$highest_movie.Genre", BoxOfficeCollection: "$highest_movie.BoxOfficeCollection" } }
])

4. Create an index on the field Movie_ID:

db.Movies_Data.createIndex({ Movie_ID: 1 })

5. Create an index on fields Movie_Name and Director:

db.Movies_Data.createIndex({ Movie_Name: 1, Director: 1 })

6. Drop an index on fields Movie_Name and Director:

db.Movies_Data.dropIndex({ Movie_Name: 1, Director: 1 })

<==========================================================================================================================================================================================================================================================>

Problem Statement 18 (AGGREGATION & INDEXING USING MONGODB)
Create the Collection Student_Data( Student _ID, Student _Name, Department, Marks )and solve the following:
1. Display all Students based on their departments along with an average Marks of a particular department.
2. Displays the number of Students associated along with a particular department.
3. Display list of Students with the highest Marks in each Department in descending order of Marks.
4. Create an index on field Student_ID.
5. Create an index on fields “Student_Name‘ and “Department”.
6. Drop an index on field Student_ID.
7. Drop an index on fields “Student_Name‘ and “Department”.

solution : 

// Use the database 'school' (create it if it doesn't exist)
use school;

// Create the Student_Data collection and insert some documents
db.Student_Data.insertMany([
    { Student_ID: 1, Student_Name: "John Doe", Department: "Computer Science", Marks: 85 },
    { Student_ID: 2, Student_Name: "Jane Smith", Department: "Mathematics", Marks: 90 },
    { Student_ID: 3, Student_Name: "Alice Johnson", Department: "Computer Science", Marks: 95 },
    { Student_ID: 4, Student_Name: "Bob Brown", Department: "Physics", Marks: 75 },
    { Student_ID: 5, Student_Name: "Charlie White", Department: "Mathematics", Marks: 80 },
    { Student_ID: 6, Student_Name: "David Black", Department: "Physics", Marks: 85 },
    { Student_ID: 7, Student_Name: "Emily Green", Department: "Computer Science", Marks: 92 }
]);

1. Display all Students based on their departments along with the average marks of a particular department

db.Student_Data.aggregate([
    {
        $group: {
            _id: "$Department",         // Group by department
            avgMarks: { $avg: "$Marks" } // Calculate the average marks
        }
    },
    {
        $lookup: {
            from: "Student_Data",       // Join with the same collection
            localField: "_id",           // Department from this collection
            foreignField: "Department",  // Department from the other collection
            as: "students_in_dept"      // Output field containing students
        }
    },
    {
        $project: {
            Department: "$_id",         // Display department
            avgMarks: 1,                // Display average marks
            students_in_dept: 1         // Display students in the department
        }
    }
]);

2. Display the number of students associated with each department

db.Student_Data.aggregate([
    {
        $group: {
            _id: "$Department",        // Group by department
            studentCount: { $sum: 1 }  // Count the number of students
        }
    }
]);

3. Display a list of students with the highest marks in each department in descending order of marks

db.Student_Data.aggregate([
    {
        $sort: { Marks: -1 }   // Sort by Marks in descending order
    },
    {
        $group: {
            _id: "$Department",  // Group by department
            topStudent: { $first: "$$ROOT" }  // Get the top student in each department
        }
    },
    {
        $project: {
            Department: "$_id",
            Student_Name: "$topStudent.Student_Name",
            Marks: "$topStudent.Marks"
        }
    }
]);

4. Create an index on the field Student_ID

db.Student_Data.createIndex({ Student_ID: 1 });

5. Create an index on the fields Student_Name and Department

db.Student_Data.createIndex({ Student_Name: 1, Department: 1 });

6. Drop the index on the field Student_ID

db.Student_Data.dropIndex({ Student_ID: 1 });

7. Drop the index on the fields Student_Name and Department

db.Student_Data.dropIndex({ Student_Name: 1, Department: 1 });
